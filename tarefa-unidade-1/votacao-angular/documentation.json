{
    "pipes": [],
    "interfaces": [
        {
            "name": "VoteInterface",
            "id": "interface-VoteInterface-6565851f96af00a9c27c7259ad36d646",
            "file": "src/components/sharedInterfaces.ts",
            "type": "interface",
            "sourceCode": "interface VoteInterface {\n  option: String,\n  count: number\n}\n\nexport { VoteInterface }",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "option",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-2914df6d12a2fd8b37dea3feb170f0d0",
            "file": "src/components/Button/Button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "simple-button",
            "styleUrls": [
                "./Button.scss"
            ],
            "styles": [],
            "template": "<button      type=\"button\"\n      (click)=\"onClick.emit($event)\"\n      [disabled]=\"disabled\"\n      [ngClass]=\"classes\"\n    >\n      {{ text }}\n    </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 20,
                    "type": "Boolean"
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "Boolean"
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "line": 23,
                    "type": "String"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'simple-button',\n  template: `<button\n      type=\"button\"\n      (click)=\"onClick.emit($event)\"\n      [disabled]=\"disabled\"\n      [ngClass]=\"classes\"\n    >\n      {{ text }}\n    </button>`,\n  styleUrls: ['./Button.scss'],\n})\nexport default class ButtonComponent {\n  @Input()\n  selected: Boolean = false;\n\n  @Input()\n  disabled: Boolean = false;\n\n  @Input()\n  text: String = '';\n\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): Object {\n    return {\n      'btn': true,\n      'btn--selected': (this.selected && !this.disabled)\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$selector: '.btn';\n\n#{$selector} {\n  transition: all 0.2s;\n\n  &--selected {\n    box-shadow: 0px 0px 3px 1px #999;\n  }\n}",
                    "styleUrl": "./Button.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "Object",
                        "line": 28
                    }
                }
            }
        },
        {
            "name": "ResultComponent",
            "id": "component-ResultComponent-e24892583c0710fb38ddb626754c093b",
            "file": "src/components/Result/Result.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "result",
            "styleUrls": [
                "./Result.scss"
            ],
            "styles": [],
            "template": "<div class=\"result\">    <ol class=\"result__list\">\n      <li *ngFor=\"let vote of votes\" class=\"result__list-item\">\n        {{getVoteMessage(vote)}}\n      </li>\n    </ol>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "votes",
                    "defaultValue": "[]",
                    "line": 21,
                    "type": "Array<VoteInterface>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getVoteMessage",
                    "args": [
                        {
                            "name": "vote",
                            "type": "VoteInterface"
                        }
                    ],
                    "optional": false,
                    "returnType": "String",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "vote",
                            "type": "VoteInterface",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVotePercentage",
                    "args": [
                        {
                            "name": "votesCount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "String",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "votesCount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { VoteInterface } from '../sharedInterfaces';\n\nfunction calculatePercentage(target: number, total: number): String {\n  return `${((target / total) * 100).toFixed(0)}%`;\n}\n\n@Component({\n  selector: 'result',\n  template: `<div class=\"result\">\n    <ol class=\"result__list\">\n      <li *ngFor=\"let vote of votes\" class=\"result__list-item\">\n        {{getVoteMessage(vote)}}\n      </li>\n    </ol>\n  </div>`,\n  styleUrls: ['./Result.scss'],\n})\nexport default class ResultComponent {\n  @Input()\n  votes: Array<VoteInterface> = [];\n\n  private get totalVotes(): number {\n    return this.votes.reduce((acc, { count }) => acc + count, 0);\n  }\n\n  private getVotePercentage(votesCount: number): String {\n    return calculatePercentage(votesCount, this.totalVotes);\n  }\n\n  public getVoteMessage(vote: VoteInterface): String {\n    return `${vote.option} - ${vote.count} votes (${this.getVotePercentage(vote.count)})`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$selector: '.result';\n\n#{$selector} {\n  margin: -4px 0;\n  \n  &__list {\n    margin: 0;\n    padding: 0;\n    list-style-position: inside;\n  }\n\n  &__list-item {\n    margin: 4px 0;\n  }\n}",
                    "styleUrl": "./Result.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "totalVotes": {
                    "name": "totalVotes",
                    "getSignature": {
                        "name": "totalVotes",
                        "type": "number",
                        "returnType": "number",
                        "line": 23
                    }
                }
            }
        },
        {
            "name": "VoteListComponent",
            "id": "component-VoteListComponent-8ef2328d7f9ec5692a7861a33199888d",
            "file": "src/components/VoteList/VoteList.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "vote-list",
            "styleUrls": [
                "./VoteList.scss"
            ],
            "styles": [],
            "template": "<div [ngClass]=\"classes\">    <ul class=\"vote-list__list\">\n      <li *ngFor=\"let option of options\" class=\"vote-list__list-item\">\n        <simple-button\n          (onClick)=\"onSelectVote(option)\"\n          [selected]=\"selectedVote === option\"\n          [disabled]=\"disabled\"\n          [text]=\"option\"\n        ></simple-button>\n      </li>\n    </ul>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 24,
                    "type": "Boolean"
                },
                {
                    "name": "display",
                    "defaultValue": "'horizontal'",
                    "line": 21,
                    "type": "String"
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 27,
                    "type": "Array<String>"
                }
            ],
            "outputsClass": [
                {
                    "name": "onVote",
                    "defaultValue": "new EventEmitter<String>()",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedVote",
                    "defaultValue": "\"\"",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSelectVote",
                    "args": [
                        {
                            "name": "selectedOption",
                            "type": "String"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedOption",
                            "type": "String",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'vote-list',\n  template: `<div [ngClass]=\"classes\">\n    <ul class=\"vote-list__list\">\n      <li *ngFor=\"let option of options\" class=\"vote-list__list-item\">\n        <simple-button\n          (onClick)=\"onSelectVote(option)\"\n          [selected]=\"selectedVote === option\"\n          [disabled]=\"disabled\"\n          [text]=\"option\"\n        ></simple-button> \n      </li>\n    </ul>\n  </div>`,\n  styleUrls: ['./VoteList.scss'],\n})\nexport default class VoteListComponent {\n  @Input()\n  display: String = 'horizontal';\n\n  @Input()\n  disabled: Boolean = false;\n\n  @Input()\n  options: Array<String> = [];\n\n  @Output()\n  onVote = new EventEmitter<String>();\n\n  public selectedVote: String = \"\";\n\n  public onSelectVote(selectedOption: String): void {\n    this.selectedVote = selectedOption;\n    this.onVote.emit(selectedOption);\n  }\n\n  public get classes(): Object {\n    return {\n      'vote-list': true,\n      'vote-list--horizontal': this.display === 'horizontal',\n      'vote-list--vertical': this.display === 'vertical'\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$selector: '.vote-list';\n\n#{$selector} {\n  &__list {\n    margin: 0;\n    padding: 0;\n  }\n\n  &__list-item {\n    list-style: none;\n  }\n\n  &--horizontal {\n    margin: 0 -4px;\n\n    #{$selector}__list-item {\n      display: inline;\n      margin: 0 4px;\n    }\n  }\n\n  &--vertical {\n    margin: -4px 0;\n\n    #{$selector}__list-item {\n      display: block;\n      margin: 4px 0;\n    }\n  }\n}",
                    "styleUrl": "./VoteList.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "Object",
                        "line": 39
                    }
                }
            }
        },
        {
            "name": "VotingCardComponent",
            "id": "component-VotingCardComponent-8fdf62c593d73a6fcc02a4dbfd53df16",
            "file": "src/components/VotingCard/VotingCard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "voting-card",
            "styleUrls": [
                "./VotingCard.scss"
            ],
            "styles": [],
            "template": "<div class=\"voting-card\">    <ng-template [ngIf]=\"state === 'open'\">\n      <h3 class=\"voting-card__title\">{{title}}</h3>\n      <div class=\"voting-card__cabinet\">\n        <vote-list [options]=\"votingOptions\" (onVote)=\"onSelectVote($event)\"></vote-list>\n      </div>\n    </ng-template>\n    <ng-template [ngIf]=\"state === 'closed'\">\n      <result [votes]=\"currentVotes\"></result>\n    </ng-template>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "state",
                    "defaultValue": "'open'",
                    "line": 21,
                    "type": "String"
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "line": 24,
                    "type": "String"
                },
                {
                    "name": "votes",
                    "defaultValue": "[]",
                    "line": 27,
                    "type": "Array<VoteInterface>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentVotes",
                    "defaultValue": "[]",
                    "type": "Array<VoteInterface>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSelectVote",
                    "args": [
                        {
                            "name": "selectedVote",
                            "type": "String"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedVote",
                            "type": "String",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\nimport { VoteInterface } from \"../sharedInterfaces\";\n\n@Component({\n  selector: 'voting-card',\n  template: `<div class=\"voting-card\">\n    <ng-template [ngIf]=\"state === 'open'\">\n      <h3 class=\"voting-card__title\">{{title}}</h3>\n      <div class=\"voting-card__cabinet\">\n        <vote-list [options]=\"votingOptions\" (onVote)=\"onSelectVote($event)\"></vote-list>\n      </div>\n    </ng-template>\n    <ng-template [ngIf]=\"state === 'closed'\">\n      <result [votes]=\"currentVotes\"></result>\n    </ng-template>\n  </div>`,\n  styleUrls: ['./VotingCard.scss'],\n})\nexport default class VotingCardComponent {\n  @Input()\n  state: String = 'open';\n\n  @Input()\n  title: String = '';\n\n  @Input()\n  votes: Array<VoteInterface> = [];\n\n  constructor() {\n    this.currentVotes = this.votes;\n  }\n\n  public get votingOptions(): Array<String> {\n    return this.votes.map(item => item.option);\n  }\n\n  public currentVotes: Array<VoteInterface> = [];\n\n  public onSelectVote(selectedVote: String): void {\n    this.currentVotes = this.currentVotes.map(\n      (item) => (\n        item.option === selectedVote\n          ? { ...item, count: item.count + 1 }\n          : item\n      )\n    )\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$selector: '.voting-card';\n\n#{$selector} {\n  background-color: lightblue;\n  border: 1px solid blue;\n  border-radius: 8px;\n  box-sizing: border-box;\n  padding: 8px 16px;\n  width: 100%;\n\n  &__title {\n    margin: 0;\n  }\n\n  &__cabinet {\n    padding-top: 8px;\n  }\n}",
                    "styleUrl": "./VotingCard.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "accessors": {
                "votingOptions": {
                    "name": "votingOptions",
                    "getSignature": {
                        "name": "votingOptions",
                        "type": "",
                        "returnType": "Array<String>",
                        "line": 33
                    }
                }
            }
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Button"
                        },
                        {
                            "name": "Result"
                        },
                        {
                            "name": "VoteList"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ClosedVotingCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VotingCard.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DefaultButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultResult",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Result.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DisabledButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DisabledList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VoteList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "HorizontalList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VoteList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OpenVotingCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VotingCard.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SelectedButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Result.stories.ts",
                "type": "Story<Result>",
                "defaultValue": "(args: Result) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VoteList.stories.ts",
                "type": "Story<VoteList>",
                "defaultValue": "(args: VoteList) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VotingCard.stories.ts",
                "type": "Story<VotingCard>",
                "defaultValue": "(args: VotingCard) => ({\n  props: args,\n})"
            },
            {
                "name": "VerticalList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VoteList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "calculatePercentage",
                "file": "src/components/Result/Result.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "target"
                    },
                    {
                        "name": "total"
                    }
                ],
                "returnType": "String",
                "jsdoctags": [
                    {
                        "name": "target",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "total",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/VotingCard.stories.ts": [
                {
                    "name": "ClosedVotingCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VotingCard.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OpenVotingCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VotingCard.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VotingCard.stories.ts",
                    "type": "Story<VotingCard>",
                    "defaultValue": "(args: VotingCard) => ({\n  props: args,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "DefaultButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DisabledButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SelectedButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Result.stories.ts": [
                {
                    "name": "DefaultResult",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Result.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Result.stories.ts",
                    "type": "Story<Result>",
                    "defaultValue": "(args: Result) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/VoteList.stories.ts": [
                {
                    "name": "DisabledList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VoteList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HorizontalList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VoteList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VoteList.stories.ts",
                    "type": "Story<VoteList>",
                    "defaultValue": "(args: VoteList) => ({\n  props: args,\n})"
                },
                {
                    "name": "VerticalList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VoteList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/components/Result/Result.component.ts": [
                {
                    "name": "calculatePercentage",
                    "file": "src/components/Result/Result.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "target"
                        },
                        {
                            "name": "total"
                        }
                    ],
                    "returnType": "String",
                    "jsdoctags": [
                        {
                            "name": "target",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "total",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/components/Button/Button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/components/Result/Result.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/components/Result/Result.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "calculatePercentage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/VoteList/VoteList.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VoteListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/components/VotingCard/VotingCard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VotingCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/components/sharedInterfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VoteInterface",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SelectedButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Result.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultResult",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Result.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VoteList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VoteList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VoteList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VoteList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VerticalList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VotingCard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClosedVotingCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VotingCard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OpenVotingCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VotingCard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}